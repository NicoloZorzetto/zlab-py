"""
zforms_behaviors.py — Shared behavior functions for Zforms.

This module is part of the zlab library by Nicolò Zorzetto.

License
-------
GPL v3
"""

from pathlib import Path
import pandas as pd

from zlab._zform_metadata import extract_metadata, attach_metadata, compute_sha256
from zlab.zform_apply import _zform_apply
from zlab.warnings import ZformRuntimeWarning, ZformExportWarning


def apply_zforms(df: pd.DataFrame, zforms_df: pd.DataFrame, **kwargs) -> pd.DataFrame:
    """Apply zform transformations to a new DataFrame."""
    return _zform_apply(df, zforms_df, **kwargs)


def export_zforms(zforms_df: pd.DataFrame, metadata: dict, path: str | Path) -> Path:
    """Export zforms results with metadata attached."""
    df_with_meta = attach_metadata(zforms_df, metadata)
    path = Path(path)
    ext = path.suffix.lower()

    try:
        if ext == ".csv":
            df_with_meta.to_csv(path, index=False)
        elif ext in (".xls", ".xlsx"):
            df_with_meta.to_excel(path, index=False)
        elif ext == ".json":
            df_with_meta.to_json(path, orient="records", indent=2)
        elif ext == ".parquet":
            df_with_meta.to_parquet(path)
        elif ext == ".html":
            df_with_meta.to_html(path, index=False)
        elif ext == ".md":
            df_with_meta.to_markdown(path)
        else:
            ZformExportWarning(f"Unsupported export format '{ext}', skipping export.")
            return None
    except Exception as e:
        ZformExportWarning(f"Export failed for '{path}': {e}")
        return None

    return path


def import_zforms(path: str | Path) -> pd.DataFrame:
    """Load zforms results from any supported format and validate metadata."""
    path = Path(path)
    ext = path.suffix.lower()

    if not path.exists():
        raise FileNotFoundError(f"File not found: {path}")

    if ext == ".csv":
        df = pd.read_csv(path)
    elif ext in (".xls", ".xlsx"):
        df = pd.read_excel(path)
    elif ext == ".json":
        df = pd.read_json(path)
    elif ext == ".parquet":
        df = pd.read_parquet(path)
    elif ext == ".html":
        df = pd.read_html(path)[0]
    elif ext == ".md":
        df = pd.read_table(path, sep="|", engine="python")
    else:
        raise ValueError(f"Unsupported zforms file type '{ext}'.")

    metadata = extract_metadata(df)
    if metadata is None:
        raise ValueError(
            f"Missing or invalid zform metadata in {path}. "
            f"This file may not have been generated by zform()."
        )

    # Validate integrity of zforms
    _ = validate_zforms(df, metadata)

    return df


def validate_zforms(df: pd.DataFrame, metadata: dict) -> bool:
    """Validate the hash and metadata integrity of an existing zforms DataFrame."""
    stored_hash = metadata.get("sha256")
    if not stored_hash:
        ZformRuntimeWarning("No SHA256 stored in metadata; cannot validate integrity.")
        return False

    current_hash = compute_sha256(df.drop(columns=["__zform_metadata__"], errors="ignore"))
    valid = stored_hash == current_hash

    if not valid:
        ZformRuntimeWarning("zforms integrity validation failed — data mismatch detected.")

    # Also check that user-defined functions metadata exist
    custom_funcs = metadata.get("custom_functions", [])
    if not isinstance(custom_funcs, list):
        raise ValueError(
            "Invalid or missing custom function metadata."
        )

    custom_funcs = metadata.get("custom_functions", {})
    if not isinstance(custom_funcs, (list, dict)):
        ZformRuntimeWarning("Unexpected custom_functions metadata type; continuing without strict check.")


    return valid
